# -*- coding: utf-8 -*-

from django.shortcuts import render
from django import forms
from django.core.mail import send_mail
from django.http import HttpResponseRedirect
from django.core.urlresolvers import reverse

from studentsdb.settings import ADMIN_EMAIL

from crispy_forms.helper import FormHelper
from crispy_forms.layout import Submit

from django.views.generic import TemplateView

class ContactForm(forms.Form):

	def __init__(self, *args, **kwargs): 
		# call original initializator
		super(ContactForm, self).__init__(*args, **kwargs)

		# this helper object allows us to customize form
		self.helper = FormHelper()

		# form tag attributes
		self.helper.form_class = 'form-horizontal'
		self.helper.form_method = 'post'
		self.helper.form_action = reverse('contact_admin')

		# twitter bootstrap styles
		self.helper.help_text_inline = True
		self.helper.html5_required = True
		self.helper.label_class = 'col-sm-2 control-label'
		self.helper.field_class = 'col-sm-10'

		# form buttons
		self.helper.add_input(Submit('send_button', u'Надіслати'))

	from_email = forms.EmailField(
		label = u'Ваша Емайл Адреса')

	subject = forms.CharField(
		label=u"Заголовок листа",
		max_length=128)

	message = forms.CharField(
		label=u"Текст повідомлення",
		max_length=2560,
		widget=forms.Textarea)

"""
class ContactView(FormView):
    template_name = 'contact_admin/form.html'
    form_class = ContactForm
    
    def form_valid(self, form):
        # This method is called for valid data
        subject = form.cleaned_data['subject']
        message = form.cleaned_data['message']
        from_email = form.cleaned_data['from_email']
        
        try:
            #send_mail(subject, message, from_email, [ADMIN_EMAIL])
            pass
        except Exception:
            self.message = u'Під час відправки листа виникла непередбачувана помилка. Спробуйте скористатись даною формою пізніше.'
        else:
            self.message = u'Повідомлення успішно надіслано.'
            
        return super(ContactView, self).form_valid(form)

    def get_success_url(self):
        return u'%s?status_message=%s' % (reverse('contact_admin'), self.message)
"""


class CustomContactForm(ContactForm):
    def __init__(self, request, *args, **kwargs):
        super(CustomContactForm, self).__init__(request=request, *args, **kwargs)
        fields_keyOrder = ['reason', 'name', 'email', 'body', 'captcha']
        if (self.fields.has_key('keyOrder')):
            self.fields.keyOrder = fields_keyOrder
        else:
            self.fields = OrderedDict((k, self.fields[k]) for k in fields_keyOrder)
 
    REASON = (
        ('support', 'Support'),
        ('feedback', 'Feedback'),
        ('delete', 'Account deletion')
    )
    reason = forms.ChoiceField(choices=REASON, label='Reason')
    # captcha = CaptchaField()
    template_name = 'contact_form/contact_form.txt'
    subject_template_name = "contact_form/contact_form_subject.txt"


class CustomContactFormView(FormView):
    form_class = CustomContactForm
    template_name = 'contact_form/contact_form.html'
 
    def form_valid(self, form):
        form.save()
        return super(CustomContactFormView, self).form_valid(form)
 
    def get_form_kwargs(self):
        # ContactForm instances require instantiation with an
        # HttpRequest.
        kwargs = super(CustomContactFormView, self).get_form_kwargs()
        kwargs.update({'request': self.request})
        return kwargs
 
    def get_success_url(self):
        # This is in a method instead of the success_url attribute
        # because doing it as an attribute would involve a
        # module-level call to reverse(), creating a circular
        # dependency between the URLConf (which imports this module)
        # and this module (which would need to access the URLConf to
        # make the reverse() call).
        return reverse('contact_form_sent')


def contact_admin(request):
	# check if form was posted
	if request.method == 'POST':

		# create a form instance and populate it with data from the request
		form = ContactForm(request.POST)

		# check whether user data is valid:
		if form.is_valid():
			# send email
			subject = form.cleaned_data['subject']
			message = form.cleaned_data['message']
			from_email = form.cleaned_data['from_email']
			try:
				#send_mail(subject, message, from_email, [ADMIN_EMAIL])
				send_mail(subject, message+'\n\nMessage was send from: '+from_email, 'Students DB ', [ADMIN_EMAIL])
			except Exception:
				message = u'Під час відправки листа виникла непередбачувана помилка. Спробуйте скористатись даною формою пізніше.'
			else:
				message = u'Повідомлення успішно надіслане!'

				# redirect to same contact page with success message
				return HttpResponseRedirect(u'%s?status_message=%s' % (reverse('contact_admin'),message))

	else:
		form = ContactForm()

	return render(request, 'contact_admin/form.html', {'form': form})


